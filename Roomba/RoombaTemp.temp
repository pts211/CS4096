
class Roomba
{
public:
    /// \enum Baud
    /// Demo types to pass to Roomba::baud()
    typedef enum
    {
	Baud300    = 0,
	Baud600    = 1,
	Baud1200   = 2,
	Baud2400   = 3,
	Baud4800   = 4,
	Baud9600   = 5,
	Baud14400  = 6,
	Baud19200  = 7,
	Baud28800  = 8,
	Baud38400  = 9,
	Baud57600  = 10,
	Baud115200 = 11,
    } Baud;
    
    /// \enum Demo
    /// Demo types to pass to Roomba::demo()
    typedef enum
    {
	DemoAbort = -1,
	DemoCover = 0,
	DemoCoverAndDock = 1,
	DemoSpotCover = 2,
	DemoMouse = 3,
	DemoDriveFigureEight = 4,
	DemoWimp = 5,
	DemoHome = 6,
	DemoTag = 7,
	DemoPachelbel = 8,
	DemoBanjo = 9,
    } Demo;
    
    /// \enum Drive
    /// Special values for radius in Roomba::drive()
    typedef enum
    {
	DriveStraight                = 0x8000,
	DriveInPlaceClockwise        = 0xFFFF,
	DriveInPlaceCounterClockwise = 0x0001,
    } Drive;
  
    /// \enum StreamCommand
    /// Values to pass to Roomba::streamCommand()
    typedef enum
    {
	StreamCommandPause  = 0,  
	StreamCommandResume = 1,
    } StreamCommand;
  
    /// \enum EventType
    /// Values to pass to Roomba::waitEvent()
    typedef enum
    {
	EventTypeWheelDrop       = 1,
	EventTypeFronWheelDrop   = 2,
	EventTypeLeftWheelDrop   = 3,
	EventTypeRightWheelDrop  = 4,
	EventTypeBump            = 5,
	EventTypeLeftBump        = 6,
	EventTypeRightBump       = 7,
	EventTypeVirtualWall     = 8,
	EventTypeWall            = 9,
	EventTypeCliff           = 10,
	EventTypeLeftCliff       = 11,
	EventTypeFrontLeftCliff  = 12,
	EventTypeFrontRightCliff = 13,
	EventTypeRightCliff      = 14,
	EventTypeHomeBase        = 15,
	EventTypeAdvanceButton   = 16,
	EventTypePlayButton      = 17,
	EventTypeDigitalInput0   = 18,
	EventTypeDigitalInput1   = 19,
	EventTypeDigitalInput2   = 20,  
	EventTypeDigitalInput3   = 21,
	EventTypeModePassive     = 22,
    } EventType;
  
    /// \enum IRCommand
    /// Values for sensor packet ID 27
    typedef enum
    {
	// Remote control:
	IRCommandLeft                   = 129,
	IRCommandForward                = 130,
	IRCommandRight                  = 131,
	IRCommandSpot                   = 132,
	IRCommandMax                    = 133,
	IRCommandSmall                  = 134,
	IRCommandMedium                 = 135,
	IRCommandLargeClean             = 136,
	IRCommandPause                  = 137,
	IRCommandPower                  = 138,
	IRCommandArcForwardLeft         = 139,
	IRCommandArcForwardRight        = 140,
	IRCommandDriveStop              = 141,
	// Scheduling Remote:
	IRCommandSendAll                = 142,
	IRCommandSeekDock               = 143,
	// Home Base:
	IRCommandReserved1              = 240,
	IRCommandRedBuoy                = 248,
	IRCommandGreenBuoy              = 244, 
	IRCommandForceField             = 242,
	IRCommandRedGreenBuoy           = 252,
	IRCommandRedBuoyForceField      = 250,
	IRCommandGreenBuoyForceField    = 246,
	IRCommandRedGreenBuoyForceField = 254,
    } IRCommand;
  
    /// \enum ChargeState
    /// Values for sensor packet ID 21
    typedef enum
    {
	ChargeStateNotCharging            = 0,
	ChargeStateReconditioningCharging = 1,
	ChargeStateFullChanrging          = 2,
	ChargeStateTrickleCharging        = 3,
	ChargeStateWaiting                = 4,
	ChargeStateFault                  = 5,
    } ChargeState;
  
    /// \enum Mode
    /// Values for sensor packet ID 35
    typedef enum
    {
	ModeOff     = 0,
	ModePassive = 1,
	ModeSafe    = 2,
	ModeFull    = 3,
    } Mode;
  
    /// \enum Sensor
    /// Values for sensor packet IDs to pass to getSensors() and getSensorsList()
    typedef enum
    {
	Sensors7to26                   = 0,
	Sensors7to16                   = 1,
	Sensors17to20                  = 2,
	Sensors21to26                  = 3,
	Sensors27to34                  = 4,
	Sensors35to42                  = 5,
	Sensors7to42                    = 6,
	SensorBumpsAndWheelDrops       = 7,
	SensorWall                     = 8,
	SensorCliffLeft                = 9,
	SensorCliffFrontLeft           = 10,
	SensorCliffFrontRight          = 11,
	SensorCliffRight               = 12,
	SensorVirtualWall              = 13,
	SensorOvercurrents             = 14,
//	SensorUnused1                  = 15,
//	SensorUnused2                  = 16,
	SensorIRByte                   = 17,
	SensorButtons                  = 18,
	SensorDistance                 = 19,
	SensorAngle                    = 20,
	SensorChargingState            = 21,
	SensorVoltage                  = 22,
	SensorCurrent                  = 23,
	SensorBatteryTemperature       = 24,
	SensorBatteryCharge            = 25,
	SensorBatteryCapacity          = 26,
	SensorWallSignal               = 27,
	SensoCliffLeftSignal           = 28,
	SensoCliffFrontLeftSignal      = 29,
	SensoCliffFrontRightSignal     = 30,
	SensoCliffRightSignal          = 31,
	SensorUserDigitalInputs        = 32,
	SensorUserAnalogInput          = 33,
	SensorChargingSourcesAvailable = 34,
	SensorOIMode                   = 35,
	SensorSongNumber               = 36,
	SensorSongPlaying              = 37,
	SensorNumberOfStreamPackets    = 38,
	SensorVelocity                 = 39,
	SensorRadius                   = 40,
	SensorRightVelocity            = 41,
	SensorLeftVelocity             = 42,
    } Sensor;
  
    /// Constructor. You can have multiple simultaneous Roomba if that makes sense.
    /// \param[in] serial POinter to the HardwareSerial port to use to communicate with the Roomba. 
    /// Defaults to &Serial
    /// \param[in] baud the baud rate to use on the serial port. Defaults to 57600, the default for the Roomba.
    Roomba(HardwareSerial* serial = &Serial, Baud baud = Baud57600);

    /// Resets the Roomba. 
    /// It will emit its startup message
    /// Caution, this may take several seconds to complete
    void reset();

    /// Starts the Open Interface and sets the mode to Passive. 
    /// You must send this before sending any other commands.
    /// Initialises the serial port to the baud rate given in the constructor
    void start();
    
    /// Converts the specified baud code into a baud rate in bits per second
    /// \param[in] baud Baud code, one of Roomba::Baud
    /// \return baud rate in bits per second
    uint32_t baudCodeToBaudRate(Baud baud);

    /// Changes the baud rate
    /// Baud is on of the Roomba::Baud enums
    void baud(Baud baud);

    /// Sets the OI to Safe mode.
    /// In Safe mode, the cliff and wheel drop detectors work to prevent Roomba driving off a cliff
    void safeMode();

    /// Sets the OI to Full mode.
    /// In Full mode, the cliff and wheel drop detectors do not stop the motors: you are responsible
    /// for full control of the Roomba
    void fullMode();

    /// Puts a Roomba in sleep mode.
    /// Roomba only, no equivalent for Create.
    void power();

    /// Causes roomba to immediately 
    /// seek the docking station.
    /// No equivalent for Create.
    void dock();

    /// Starts the requirested built-in demo
    /// \param[in] demo The demo number. One of Roomba::Demo
    void demo(Demo demo);

    /// Starts the Cover demo
    /// Changes mode to Passive
    void cover();

    /// Starts the Cover and Dock demo
    /// Changes mode to Passive
    void coverAndDock();

    /// Starts the Spot Cover demo
    /// Changes mode to Passive
    void spot();
	
    /// Starts the Roomba driving with a specified wheel velocity and radius of turn
    /// \param[in] velocity Speed in mm/s (-500 to 500 mm/s)
    /// \param[in] radius Radius of the turn in mm. (-2000 to 2000 mm). 
    /// Any of the special values in enum Roomba::Drive may be used instead of a radius value
    void drive(int16_t velocity, int16_t radius);

    /// Controls the LEDs on the Create
    /// \param[in] leds Bitmask specifying which LEDs to activate. ORed combination of ROOMBA_MASK_LED_*
    /// \param[in] powerColour The colour of the Power LED. 0 to 255. 0 = green, 255 = red, 
    /// intermediate values are intermediate colours
    /// \param[in] powerIntensity Power LED intensity. 0 to 255. 0 = off, 255 = full intensity
    void leds(uint8_t leds, uint8_t powerColour, uint8_t powerIntensity);

    /// Sets the low side drivers on or off. On the Roomba, these control the 3 motors.
    /// \param[in] out Bitmask of putputs to enable. ORed value ROOMBA_MASK_DRIVER_*
    void drivers(uint8_t out);

    /// Defines a song which can later be played with playSong()
    /// \param[in] songNumber Song number for this song. 0 to 15
    /// \param[in] notes Array of note/duration pairs. See Open Interface manual for details. 2 bytes per note, 
    /// first byte is the note and the second is the duration
    /// \param[in] len Length of notes array in bytes, so this will be twice the number of notes in the song
    void song(uint8_t songNumber, const uint8_t* notes, int len);

    /// Plays a song that has previously been defined by song()
    /// \param[in] songNumber The song number to play. 0 to 15
    void playSong(uint8_t songNumber);

    /// Low level funciton to read len bytes of data from the Roomba
    /// Blocks untill all len bytes are read or a read timeout occurs.
    /// \param[out] dest Destination where the read data is stored. Must have at least len bytes available.
    /// \param[in] len Number of bytes to read
    /// \return true if all len bytes were successfully read. Returns false in the case of a timeout 
    /// on reading any byte.
    bool getData(uint8_t* dest, uint8_t len);

    /// Reads the sensor data for the specified sensor packet ID. Note that different sensor packets have 
    /// different lengths, and it is the callers responsibilty to make sure len agrees with the expected 
    /// length of the sensor data. See the Open Interface manual for details on sensor packet lengths.
    /// Roomba.h defines various enums and defines for decoding sensor data.
    /// Blocks untill all len bytes are read or a read timeout occurs.
    /// \param[in] packetID The ID of the sensor packet to read from Roomba::Sensor
    /// \param[out] dest Destination where the read data is stored. Must have at least len bytes available.
    /// \param[in] len Number of sensor data bytes to read
    /// \return true if all len bytes were successfully read. Returns false in the case of a timeout 
    /// on reading any byte.
    bool getSensors(uint8_t packetID, uint8_t* dest, uint8_t len);
  
private:
    /// \enum PollState
    /// Values for _pollState
    typedef enum
    {
	PollStateIdle         = 0,
	PollStateWaitCount    = 1,
	PollStateWaitBytes    = 2,
	PollStateWaitChecksum = 3,
    } PollState;

    /// The baud rate to use for the serial port
    uint32_t        _baud;
	
    /// The serial port to use to talk to the Roomba
    HardwareSerial* _serial;
    
    /// Variables for keeping track of polling of data streams
    uint8_t         _pollState; /// Current state of polling, one of Roomba::PollState
    uint8_t         _pollSize;  /// Expected size of the data stream in bytes
    uint8_t         _pollCount; /// Num of bytes read so far
    uint8_t         _pollChecksum; /// Running checksum counter of data bytes + count

};

enum class BAUD : std::int8_t {
  300    = 0,
	600    = 1,
	1200   = 2,
	2400   = 3,
	4800   = 4,
	9600   = 5,
	14400  = 6,
	19200  = 7,
	28800  = 8,
	38400  = 9,
	57600  = 10,
	115200 = 11,
};